name: Release

on:
  push:
    tags:
      - "v*"
  release:
    types: [published]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  packages: write
  actions: read
  checks: read

jobs:
  # Job 1: STRICT Quality Gates - BLOCKS release if ANY check fails
  quality-gates:
    name: 🚨 STRICT Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: true # Stop immediately on first failure
      matrix:
        node-version: [18, 20] # Test on both supported versions

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: 🔍 CRITICAL - Run linting (MUST PASS)
        run: npm run lint
        continue-on-error: false

      - name: 🔍 CRITICAL - Type checking (MUST PASS)
        run: npm run type-check
        continue-on-error: false

      - name: 🔍 CRITICAL - Code formatting (MUST PASS)
        run: npm run format:check
        continue-on-error: false

      - name: 🧪 CRITICAL - Unit tests (MUST PASS)
        run: npm run test:unit
        continue-on-error: false

      - name: 🧪 CRITICAL - Integration tests (MUST PASS)
        run: npm run test:integration
        continue-on-error: false

      - name: 📊 CRITICAL - Test coverage check (MUST PASS)
        run: npm run test:coverage
        continue-on-error: false

      - name: 🔒 CRITICAL - Security audit (MUST PASS)
        run: npm audit --audit-level=high
        continue-on-error: false

      - name: 🏗️ CRITICAL - Build all packages (MUST PASS)
        run: npm run build
        continue-on-error: false

      - name: ✅ Quality Gates PASSED for Node.js ${{ matrix.node-version }}
        run: echo "✅ All quality checks passed for Node.js ${{ matrix.node-version }}"

  # Job 2: Verify CI Pipeline Status
  verify-ci-status:
    name: 🔍 Verify CI Pipeline Status
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [quality-gates]

    steps:
      - name: Check CI Status for Current Commit
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const sha = context.sha;

            console.log(`🔍 Checking CI status for commit: ${sha}`);

            // Get all check runs for this commit
            const { data: checkRuns } = await github.rest.checks.listForRef({
              owner,
              repo,
              ref: sha,
              per_page: 100
            });

            console.log(`Found ${checkRuns.check_runs.length} check runs`);

            // Get all status checks for this commit
            const { data: statuses } = await github.rest.repos.listCommitStatusesForRef({
              owner,
              repo,
              ref: sha,
              per_page: 100
            });

            console.log(`Found ${statuses.length} status checks`);

            // Check for any failures
            const failedChecks = checkRuns.check_runs.filter(run =>
              run.conclusion === 'failure' || run.conclusion === 'cancelled'
            );

            const failedStatuses = statuses.filter(status =>
              status.state === 'failure' || status.state === 'error'
            );

            if (failedChecks.length > 0) {
              console.log('❌ FAILED CHECK RUNS:');
              failedChecks.forEach(check => {
                console.log(`  - ${check.name}: ${check.conclusion}`);
              });
            }

            if (failedStatuses.length > 0) {
              console.log('❌ FAILED STATUS CHECKS:');
              failedStatuses.forEach(status => {
                console.log(`  - ${status.context}: ${status.state}`);
              });
            }

            if (failedChecks.length > 0 || failedStatuses.length > 0) {
              core.setFailed(`🚨 RELEASE BLOCKED: ${failedChecks.length + failedStatuses.length} CI checks are failing. All CI checks must pass before release.`);
            } else {
              console.log('✅ All CI checks are passing - Release approved');
            }

  # Job 3: Publish to NPM
  publish-npm:
    name: 📦 Publish to NPM
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [quality-gates, verify-ci-status] # BOTH quality gates AND CI status must pass
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: npm ci

      - name: Build packages
        run: npm run build

      - name: Detect Beta Release
        id: detect-beta
        run: |
          if [[ "${{ github.ref_name }}" == *"beta"* ]]; then
            echo "is_beta=true" >> $GITHUB_OUTPUT
            echo "npm_tag=beta" >> $GITHUB_OUTPUT
            echo "🔍 Beta release detected"
          else
            echo "is_beta=false" >> $GITHUB_OUTPUT
            echo "npm_tag=latest" >> $GITHUB_OUTPUT
            echo "🔍 Production release detected"
          fi

      - name: Publish to NPM
        run: |
          echo "Publishing packages to NPM..."
          echo "Release type: ${{ steps.detect-beta.outputs.is_beta == 'true' && 'BETA' || 'PRODUCTION' }}"
          echo "NPM tag: ${{ steps.detect-beta.outputs.npm_tag }}"

          # Publish client package
          cd packages/client
          npm publish --access public --tag ${{ steps.detect-beta.outputs.npm_tag }}
          echo "✅ Published @kansnpms/console-log-pipe-client@${{ github.ref_name }} with tag: ${{ steps.detect-beta.outputs.npm_tag }}"
          cd ../..

          # Publish CLI package
          cd packages/cli
          npm publish --access public --tag ${{ steps.detect-beta.outputs.npm_tag }}
          echo "✅ Published @kansnpms/console-log-pipe-cli@${{ github.ref_name }} with tag: ${{ steps.detect-beta.outputs.npm_tag }}"
          cd ../..

          # Publish Storage Monitor package
          cd packages/storage-monitor
          npm publish --access public --tag ${{ steps.detect-beta.outputs.npm_tag }}
          echo "✅ Published @kansnpms/storage-pipe@${{ github.ref_name }} with tag: ${{ steps.detect-beta.outputs.npm_tag }}"
          cd ../..

          echo "🎉 All packages published successfully!"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Job 4: Create GitHub Release
  create-release:
    name: 🏷️ Create GitHub Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [quality-gates, verify-ci-status, publish-npm] # Must pass ALL quality checks
    if: github.event_name != 'release' && startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect Beta Release
        id: detect-beta
        run: |
          if [[ "${{ github.ref_name }}" == *"beta"* ]]; then
            echo "is_beta=true" >> $GITHUB_OUTPUT
            echo "🔍 Creating pre-release for beta"
          else
            echo "is_beta=false" >> $GITHUB_OUTPUT
            echo "🔍 Creating full release"
          fi

      - name: Generate Release Notes
        id: release-notes
        run: |
          if [[ "${{ steps.detect-beta.outputs.is_beta }}" == "true" ]]; then
            cat > release_notes.md << 'EOF'
          # 🧪 Console Log Pipe ${{ github.ref_name }} (Beta Release)

          **⚠️ This is a beta release for testing purposes.**

          ## 🆕 New Features
          - **🍪 Storage Monitor (Beta)**: Real-time browser storage and cookies monitoring
            - Cookie change detection with color-coded output
            - localStorage and sessionStorage monitoring
            - WebSocket-based real-time updates
            - Web dashboard for monitoring

          ## 📦 Beta Packages Published
          - `@kansnpms/console-log-pipe-cli@${{ github.ref_name }}`
          - `@kansnpms/console-log-pipe-client@${{ github.ref_name }}`
          - `@kansnpms/storage-pipe@${{ github.ref_name }}`

          ## 🚀 Installation
          ```bash
          # Install CLI (beta)
          npm install -g @kansnpms/console-log-pipe-cli@beta

          # Install client library (beta)
          npm install @kansnpms/console-log-pipe-client@beta

          # Install storage monitor (beta)
          npm install @kansnpms/storage-pipe@beta
          ```

          ## 🧪 Testing the Storage Monitor
          ```bash
          # Start storage monitoring
          clp storage --port 3002
          ```

          ```javascript
          // Add to your web app
          import StorageMonitor from '@kansnpms/storage-pipe';
          await StorageMonitor.init({ serverPort: 3002 });
          ```

          **Please test and provide feedback!** 🙏
          EOF
          else
            cat > release_notes.md << 'EOF'
          # 🎉 Console Log Pipe ${{ github.ref_name }}

          ## 📦 Packages Published
          - `@kansnpms/console-log-pipe-cli@${{ github.ref_name }}`
          - `@kansnpms/console-log-pipe-client@${{ github.ref_name }}`
          - `@kansnpms/storage-pipe@${{ github.ref_name }}`

          ## 🚀 Installation
          ```bash
          npm install -g @kansnpms/console-log-pipe-cli
          npm install @kansnpms/console-log-pipe-client
          ```
          EOF
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Console Log Pipe ${{ github.ref_name }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ steps.detect-beta.outputs.is_beta == 'true' }}
          token: ${{ secrets.GITHUB_TOKEN }}

  # Job 4: Create GitHub Release Assets (Optional)
  release-assets:
    name: Create Release Assets (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    needs: [quality-gates]
    continue-on-error: true

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build packages
        run: npm run build

      - name: Build CLI binaries
        shell: bash
        run: |
          cd packages/cli
          if [ -f "build/scripts/build-binaries.js" ]; then
            npm run build:binaries
            echo "✅ CLI binaries built successfully"
          else
            echo "⚠️ Binary build script not found - skipping binary creation"
            echo "CLI is available as NPM package: npm install -g @kansnpms/console-log-pipe-cli"
          fi
          cd ..

      - name: Package release assets
        shell: bash
        run: |
          mkdir -p release-assets

          # Package client library
          cd packages/client
          npm pack
          mv *.tgz ../../release-assets/
          cd ../..

          # Package CLI tool
          cd packages/cli
          npm pack
          mv *.tgz ../../release-assets/
          cd ../..

      - name: Upload release assets
        uses: actions/upload-artifact@v4
        with:
          name: release-assets-${{ matrix.os }}
          path: release-assets/
          retention-days: 30

  # Job 4: Update Documentation
  update-docs:
    name: 📚 Update Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [quality-gates, verify-ci-status, publish-npm] # Must pass ALL quality checks
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Generate API documentation
        run: |
          npm run docs:generate || echo "Documentation generation not yet implemented"

      - name: Update version badges
        run: |
          echo "Updating version badges in README.md"
          # This would update version badges with the new release version

      - name: Commit documentation updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git diff --staged --quiet || git commit -m "docs: update documentation for release ${{ github.ref_name }}"
          git push || echo "No documentation changes to push"

  # Job 5: Notify Release
  notify:
    name: 📢 Notify Release
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [quality-gates, verify-ci-status, publish-npm, update-docs] # Must pass ALL quality checks
    if: always() && (github.event_name == 'release' || startsWith(github.ref, 'refs/tags/v'))

    steps:
      - name: Detect Beta Release
        id: detect-beta
        run: |
          if [[ "${{ github.ref_name }}" == *"beta"* ]]; then
            echo "is_beta=true" >> $GITHUB_OUTPUT
          else
            echo "is_beta=false" >> $GITHUB_OUTPUT
          fi

      - name: Notify success
        if: needs.publish-npm.result == 'success'
        run: |
          if [[ "${{ steps.detect-beta.outputs.is_beta }}" == "true" ]]; then
            echo "🧪 Beta Release ${{ github.ref_name }} published successfully!"
            echo "📦 NPM packages updated (BETA):"
            echo "   - @kansnpms/console-log-pipe-cli@${{ github.ref_name }} (beta tag)"
            echo "   - @kansnpms/console-log-pipe-client@${{ github.ref_name }} (beta tag)"
            echo "   - @kansnpms/storage-pipe@${{ github.ref_name }} (beta tag)"
            echo "📚 Documentation updated"
            echo ""
            echo "Install beta packages:"
            echo "  npm install -g @kansnpms/console-log-pipe-cli@beta"
            echo "  npm install @kansnpms/console-log-pipe-client@beta"
            echo "  npm install @kansnpms/storage-pipe@beta"
            echo ""
            echo "🧪 This is a BETA release - please test and provide feedback!"
          else
            echo "🎉 Release ${{ github.ref_name }} published successfully!"
            echo "📦 NPM packages updated:"
            echo "   - @kansnpms/console-log-pipe-cli@${{ github.ref_name }}"
            echo "   - @kansnpms/console-log-pipe-client@${{ github.ref_name }}"
            echo "   - @kansnpms/storage-pipe@${{ github.ref_name }}"
            echo "📚 Documentation updated"
            echo ""
            echo "Install packages:"
            echo "  npm install -g @kansnpms/console-log-pipe-cli"
            echo "  npm install @kansnpms/console-log-pipe-client"
            echo "  npm install @kansnpms/storage-pipe"
          fi

      - name: Notify failure
        if: needs.publish-npm.result == 'failure'
        run: |
          echo "❌ Release ${{ github.ref_name }} failed!"
          echo "NPM publish result: ${{ needs.publish-npm.result }}"
          echo "Please check the logs and retry the release."
          exit 1
