name: Release

on:
  push:
    tags:
      - "v*"
  release:
    types: [published]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # Job 1: Validate Release
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run full test suite
        run: npm run test:all

      - name: Build all packages
        run: npm run build

      - name: Security audit
        run: npm audit --audit-level=high

  # Job 2: Publish to NPM
  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [validate]
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: npm ci

      - name: Build packages
        run: npm run build

      - name: Publish to NPM
        run: |
          echo "Publishing packages to NPM..."

          # Publish client package
          cd packages/client
          npm publish --access public
          echo "‚úÖ Published @kansnpms/console-log-pipe-client"
          cd ../..

          # Publish CLI package
          cd packages/cli
          npm publish --access public
          echo "‚úÖ Published @kansnpms/console-log-pipe-cli"
          cd ../..

          echo "üéâ All packages published successfully!"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Job 3: Create GitHub Release Assets (Optional)
  release-assets:
    name: Create Release Assets (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    needs: [validate]
    continue-on-error: true

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build packages
        run: npm run build

      - name: Build CLI binaries
        run: |
          cd packages/cli
          if [ -f "build/scripts/build-binaries.js" ]; then
            npm run build:binaries
            echo "‚úÖ CLI binaries built successfully"
          else
            echo "‚ö†Ô∏è Binary build script not found - skipping binary creation"
            echo "CLI is available as NPM package: npm install -g @kansnpms/console-log-pipe-cli"
          fi
          cd ..

      - name: Package release assets
        run: |
          mkdir -p release-assets

          # Package client library
          cd packages/client
          npm pack
          mv *.tgz ../../release-assets/
          cd ../..

          # Package CLI tool
          cd packages/cli
          npm pack
          mv *.tgz ../../release-assets/
          cd ../..

      - name: Upload release assets
        uses: actions/upload-artifact@v4
        with:
          name: release-assets-${{ matrix.os }}
          path: release-assets/
          retention-days: 30

  # Job 4: Update Documentation
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [publish-npm]
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Generate API documentation
        run: |
          npm run docs:generate || echo "Documentation generation not yet implemented"

      - name: Update version badges
        run: |
          echo "Updating version badges in README.md"
          # This would update version badges with the new release version

      - name: Commit documentation updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git diff --staged --quiet || git commit -m "docs: update documentation for release ${{ github.ref_name }}"
          git push || echo "No documentation changes to push"

  # Job 5: Notify Release
  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [publish-npm, update-docs]
    if: always() && (github.event_name == 'release' || startsWith(github.ref, 'refs/tags/v'))

    steps:
      - name: Notify success
        if: needs.publish-npm.result == 'success'
        run: |
          echo "üéâ Release ${{ github.ref_name }} published successfully!"
          echo "üì¶ NPM packages updated:"
          echo "   - @kansnpms/console-log-pipe-cli@${{ github.ref_name }}"
          echo "   - @kansnpms/console-log-pipe-client@${{ github.ref_name }}"
          echo "üìö Documentation updated"
          echo ""
          echo "Install packages:"
          echo "  npm install -g @kansnpms/console-log-pipe-cli"
          echo "  npm install @kansnpms/console-log-pipe-client"

      - name: Notify failure
        if: needs.publish-npm.result == 'failure'
        run: |
          echo "‚ùå Release ${{ github.ref_name }} failed!"
          echo "NPM publish result: ${{ needs.publish-npm.result }}"
          echo "Please check the logs and retry the release."
          exit 1
